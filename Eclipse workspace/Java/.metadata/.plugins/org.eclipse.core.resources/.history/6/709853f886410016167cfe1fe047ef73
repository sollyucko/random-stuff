import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;

import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.KeyStroke;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

public class Window {

	private JFrame frame;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e) {}
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Window window = new Window();
					window.frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public Window() {
		initialize();
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		frame = new JFrame();
		frame.setTitle("RPG Maker");
		frame.setBounds(100, 100, 450, 300);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		JMenuBar menuBar = new JMenuBar();
		frame.setJMenuBar(menuBar);
		
		JMenu file = new JMenu("File");
		file.setMnemonic('f');
		menuBar.add(file);
		
		JMenuItem new_ = new JMenuItem("New");
		new_.setMnemonic('n');
		new_.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N, InputEvent.CTRL_MASK));
		file.add(new_);
		
		JMenuItem open = new JMenuItem("Open");
		open.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, InputEvent.CTRL_MASK));
		open.setMnemonic('o');
		file.add(open);
		
		JMenuItem save = new JMenuItem("Save");
		save.setMnemonic('s');
		save.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, InputEvent.CTRL_MASK));
		file.add(save);
		
		JMenuItem export = new JMenuItem("Export");
		export.setMnemonic('e');
		export.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, InputEvent.CTRL_MASK | InputEvent.SHIFT_MASK));
		file.add(export);
		
		JMenu edit = new JMenu("Edit");
		edit.setMnemonic('e');
		menuBar.add(edit);
		
		JMenuItem undo = new JMenuItem("Undo");
		undo.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Z, InputEvent.CTRL_MASK));
		undo.setMnemonic('u');
		edit.add(undo);
		
		JMenuItem redo = new JMenuItem("Redo");
		redo.setMnemonic('r');
		redo.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Y, InputEvent.CTRL_MASK));
		edit.add(redo);
		
		edit.addSeparator();
		
		JMenuItem cut = new JMenuItem("Cut");
		cut.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X, InputEvent.CTRL_MASK));
		cut.setMnemonic('t');
		edit.add(cut);
		
		JMenuItem copy = new JMenuItem("Copy");
		copy.setMnemonic('c');
		copy.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C, InputEvent.CTRL_MASK));
		edit.add(copy);
		
		JTabbedPane views = new JTabbedPane(JTabbedPane.LEFT);
		frame.getContentPane().add(views, BorderLayout.CENTER);
		
		JLayeredPane mapPane = new JLayeredPane();
		views.addTab("Map", null, mapPane, null);
		
		JPanel panel = new JPanel();
		mapPane.add(panel);
		panel.setLayout(new GridLayout(1, 0, 0, 0));
		
		JInternalFrame layers = new JInternalFrame("Layers");
		// layers.setDesktopIcon();
		layers.add(new Layer());
		layers.setVisible(true);
		layers.pack();
		mapPane.setLayer(layers, 1);
		mapPane.add(layers);
		
		JList<Layer> list = new JList<Layer>();
		layers.getContentPane().add(list, BorderLayout.NORTH);
	}
	@SuppressWarnings("serial") public static class Layer extends JComponent {
		String name;
		public Layer() {
			this.name = JOptionPane.showInputDialog(this, "Layer name", "Layer name", JOptionPane.PLAIN_MESSAGE);
		}
		public Layer(String name) {
			this.name = name;
		}
	    public void paintComponent(Graphics graphic) {
	    	super.paintComponent(graphic);
	    	graphic.drawString(this.name, 0, 0);
	    }
	}
}
